- name: Ensure IdM group {{ lustre_group }} exists
  getent:
    database: group
    key: "{{ lustre_group }}"
  register: ngsservice_group

- name: Fail if {{ lustre_group }} group is missing
  fail:
    msg: "Group {{ lustre_group }} not found in IdM â€” check system config."
  when: ngsservice_group.ansible_facts.getent_group is not defined

- name: Ensure {{lustre_root_path}} exists with root:{{ lustre_group }} ownership
  file:
    path: "{{ lustre_root_path }}"
    state: directory
    owner: root
    group: "{{ lustre_group }}"
    mode: '2775'

- name: Ensure {{lustre_mount_path}} exists with {{ ngsraw_username }}:{{ ngsraw_username }} ownership
  file:
    path: "{{ lustre_mount_path }}"
    state: directory
    owner: "{{ ngsraw_username }}"
    group: "{{ discovered_gid }}"
    mode: '2775'

- name: Ensure Cache_<m_id> directories exist under qnap_mount_points
  file:
    path: "{{ lustre_mount_path }}/Cache_{{ m_id }}"
    state: directory
    owner: "{{ ngsraw_username }}"
    group: "{{ discovered_gid }}"
    mode: '2755'
  loop: "{{ machine_map | dict2items | map(attribute='value') | flatten }}"
  loop_control:
    loop_var: m_id
  when:
    - machine_map is defined

- name: Create output directories per m_type and m_id
  vars:
    output_bases:
      - raw_data
      - machine_fastqs
      - run_data
# Construct a list of all combinations between:
#   - machine types (keys from machine_map, e.g., "nextseq")
#   - machine IDs for each type (values in machine_map, e.g., "AWS00001")
#   - output base directories (e.g., "raw_data", "run_data", "machine_fastqs")
#
# Steps:
#   1. `dict2items` converts the machine_map dictionary into a list of key/value pairs.
#   2. `subelements('value')` pairs each machine type with its corresponding machine IDs.
#   3. `product(output_bases)` creates the Cartesian product with output base names.
#   4. `list` creates the final list of tuples to loop over.
# Results in loop items like:
#   - (({'key': 'nextseq'}, 'AWS00001'), 'raw_data')
  loop: "{{ machine_map | dict2items | subelements('value') | product(output_bases) | list }}"
  loop_control:
    label: "{{ item.0.0.key }}/{{ item.0.1 }}/{{ item.1 }}"
  file:
    path: "/lustre/ngsservice/{{ item.1 }}/{{ item.0.0.key }}/{{ item.0.1 }}"
    state: directory
    owner: "{{ ngsraw_username }}"
    group: "{{ discovered_gid }}"
    mode: '2755'